# IDENTITY (ContextIdApplicationContextInitializer)
spring.application.name = content-vault
spring.application.version = @project.version@
spring.application.description = The content vault provides file storage and streaming services
spring.application.title = Content Vault REST API

# spring boot profiles
spring.profiles.active = test
spring.output.ansi.enabled = ALWAYS

# ----------------------------------------
# WEB PROPERTIES
# ----------------------------------------
server.port = 8080

# Whether response compression is enabled.
server.compression.enabled = false

# List of user-agents to exclude from compression.
#server.compression.excluded-user-agents=

# Comma-separated list of MIME types that should be compressed.
server.compression.mime-types = text/html,text/xml,text/plain,text/css,text/javascript,application/javascript

# Minimum "Content-Length" value that is required for compression to be performed.
server.compression.min-response-size = 2048
# http settings
server.servlet.encoding.force = true
server.servlet.encoding.charset = UTF-8
####Jetty specific properties########
# Number of acceptor threads to use.
#server.jetty.acceptors=
# Maximum size in bytes of the HTTP post or put content.
server.jetty.max-http-form-post-size = 5000000
# Number of selector threads to use.
#server.jetty.selectors=

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold = 128KB
# Max file size.
spring.servlet.multipart.max-file-size = 200MB
# Max Request Size
spring.servlet.multipart.max-request-size = 215MB

# logging
logging.level.root = WARN
logging.level.org.springframework.security = INFO
logging.level.com.jumkid.share = DEBUG
logging.level.com.jumkid.vault = TRACE
logging.level.org.springframework.aop.interceptor.PerformanceMonitorInterceptor = TRACE

# ----------------------------------------
# Content Vault Properties
# ----------------------------------------
# enable spring security token filter
jwt.token.enable = false
jwt.token.introspect.url = http://keycloak:8080/auth/realms/jumkid/protocol/openid-connect/userinfo
# media file storage path
vault.data.home = /opt/content-vault/data
# thumbnail sizes
vault.thumbnail.small = 48
vault.thumbnail.medium = 260
vault.thumbnail.large = 480
vault.thumbnail.icon-mappings = {\
  '^video':'icon_video.png', \
  '^audio':'icon_audio.png', \
  '^application/pdf':'icon_pdf.png', \
  'powerpoint':'icon_ppt.png', \
  'excel':'icon_xls.png', \
  'word':'icon_doc.png', \
  'avatar':'icon_avatar.png'\
  }
#storage mode: local | hdfs
vault.storage.mode = local
#hdfs namenode host
hdfs.namenode.host = 0.0.0.0
#hdfs namenode port
hdfs.namenode.port = 8020

# ----------------------------------------
# ELASTICSEARCH PROPERTIES
# ----------------------------------------
elasticsearch.host = localhost
elasticsearch.port = 9200
elasticsearch.http.protocol = http
elasticsearch.keystore.path =
elasticsearch.keystore.pass =
elasticsearch.user.name = elastic
elasticsearch.user.password = bigdata
elasticsearch.cluster.name = eslocal

# ----------------------------------------
# KAFKA PROPERTIES
# ----------------------------------------
spring.kafka.bootstrap-servers = localhost:10092
spring.kafka.topic.name.vehicle.create = vehicle.create
spring.kafka.topic.name.vehicle.delete = vehicle.delete
spring.kafka.consumer.group-id = 0

