# IDENTITY (ContextIdApplicationContextInitializer)
spring.application.name = @project.artifactId@
spring.application.version = @project.version@
spring.application.description = The content vault provides file storage and streaming services
spring.application.title = Content Vault REST API

spring.output.ansi.enabled = ALWAYS

# ----------------------------------------
# WEB PROPERTIES
# ----------------------------------------
server.port = 8082

# Whether response compression is enabled.
server.compression.enabled = false
# http settings
server.servlet.encoding.force = false
server.servlet.encoding.charset = UTF-8
# List of user-agents to exclude from compression.
#server.compression.excluded-user-agents=

# Comma-separated list of MIME types that should be compressed.
server.compression.mime-types = text/html,text/xml,text/plain,text/css,text/javascript,application/javascript

# Minimum "Content-Length" value that is required for compression to be performed.
server.compression.min-response-size = 2048

####Jetty specific properties########
# Number of acceptor threads to use.
#server.jetty.acceptors=
# Maximum size in bytes of the HTTP post or put content.
server.jetty.max-http-form-post-size = 5000000
# Number of selector threads to use.
#server.jetty.selectors=

## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold = 128KB
# Max file size.
spring.servlet.multipart.max-file-size = 200MB
# Max Request Size
spring.servlet.multipart.max-request-size = 215MB

# logging
logging.file.path = /opt/content-vault/logs
logging.level.root = WARN
logging.level.org.springframework.security = INFO
logging.level.com.jumkid.share = INFO
logging.level.com.jumkid.vault = INFO
logging.pattern.console = %d{yy-MM-dd E HH:mm:ss.SSS} [%p] [JID %X{Journey-ID}] --- %logger{0} \\t:\\t %m\\n

# ----------------------------------------
# Content Vault Properties
# ----------------------------------------
# enable spring security token filter
jwt.token.enable = true
jwt.token.client.id = ${KEYCLOAK_CLIENT_ID}
jwt.token.client.secret = ${KEYCLOAK_CLIENT_SECRET}
jwt.token.fetch.url = http://${KEYCLOAK_HOST}:${KEYCLOAK_PORT}/auth/realms/jumkid/protocol/openid-connect/token
jwt.token.introspect.url = http://${KEYCLOAK_HOST}:${KEYCLOAK_PORT}/auth/realms/jumkid/protocol/openid-connect/userinfo
# keycloak admin REST api
user.profile.access.url = http://${KEYCLOAK_HOST}:${KEYCLOAK_PORT}/auth/admin/realms/jumkid/users
# All files uploaded through the REST API will be stored in this directory
file.upload-dir = ./uploads
# media file storage path
vault.data.home = /opt/content-vault/data
# thumbnail sizes
vault.thumbnail.small = 108
vault.thumbnail.medium = 380
vault.thumbnail.large = 640

#storage mode: local | hdfs
vault.storage.mode = local
#hdfs namenode host
hdfs.namenode.host = 0.0.0.0
#hdfs namenode port
hdfs.namenode.port = 8020

# ----------------------------------------
# ELASTICSEARCH PROPERTIES
# ----------------------------------------
elasticsearch.host = ${ELASTICSEARCH_HOST}
elasticsearch.port = ${ELASTICSEARCH_PORT}
elasticsearch.http.protocol = http
elasticsearch.keystore.path = ${ELASTICSEARCH_KEYSTORE_PATH}
elasticsearch.keystore.pass = ${ELASTICSEARCH_KEYSTORE_PASSWORD}
elasticsearch.user.name = ${ELASTICSEARCH_USERNAME}
elasticsearch.user.password = ${ELASTICSEARCH_PASSWORD}
elasticsearch.cluster.name = ${ELASTICSEARCH_CLUSTER_NAME}

# ----------------------------------------
# KAFKA PROPERTIES
# ----------------------------------------
spring.kafka.bootstrap-servers = ${KAFKA_HOST}:${KAFKA_PORT}
spring.kafka.topic.name.vehicle.create = vehicle.create
spring.kafka.topic.name.vehicle.delete = vehicle.delete
spring.kafka.consumer.group-id = 0
