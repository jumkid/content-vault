openapi: 3.0.3
info:
  version: v1
  title: content-vault API
  description: content-vault RESTFul api for openapi 3.0 in swagger
  termsOfService: 'https://jumkid.com/terms-of-use'
  contact:
    name: Chooli Yip
    url: jumkid.com
    email: chooli.yip@gmail.com
  license:
    name: Jumkid Public License
    url: 'http://license.jumkid.com'
servers:
  - description: Testing
    url: 'http://test.jumkid.com'
  - description: Live production
    url: 'http://api.jumkid.com'
tags:
  - name: v1
    description: API for version 1.0.0
  - name: test
    description: API for test
security:
  - bearerAuth: []
paths:
  '/metadata':
    get:
      tags:
        - v1
      operationId: searchMetadata
      description: search metadata with query and size
      parameters:
        - name: q
          in: query
          required: false
          description: query string
          schema:
            type: string
        - name: size
          in: query
          required: false
          description: size of result set
          schema:
            type: integer    
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaFile'
    post:
      tags:
        - v1
      operationId: addMetadata
      description: save a new metadata
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaFile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
      summary: Add raw metadata              
  '/metadata/{id}':
    get:
      tags:
        - v1
      operationId: getMetadata
      description: get single metadata for media file
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
    put:
      tags:
        - v1
      operationId: updateMetadata
      description: update metadata for media file
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
      requestBody:
        description: metadata json object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MediaFile'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
    delete:
      tags:
        - v1
      operationId: deleteMetadata
      description: delete single metadata for media file
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
      responses:
        '204':
          description: successfully delete the metadata by givn id
  '/content/html/{id}':
    get:
      tags:
        - v1
      operationId: getHtml
      description: get html content
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string           
  '/content/{id}':
    get:
      tags:
        - v1
      operationId: getPlain
      description: get plain content
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
        - name: ignoreTitle
          in: query
          required: false
          description: if the response body should ignore the title
          schema:
            type: boolean
      responses:
        '200':
          description: successfully fetch content in plain format
          content:
            test/plain:
              schema:
                type: string
  '/content':
    post:
      tags:
        - v1
      operationId: addTextContent
      description: save a new plain content
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
        - name: content
          in: query
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
      summary: Add text content
  '/content/html':
    post:
      tags:
        - v1
      operationId: addHtmlContent
      description: save a new text content
      parameters:
        - name: title
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
      summary: Add html content     
  '/content/stream/{id}':
    get:
      tags:
        - v1
      operationId: stream
      description: stream content
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
        - name: size
          in: query
          description: size option
          schema:
            $ref: '#/components/schemas/ThumbnailSize'
      responses:
        '200':
          description: binary stream as response
  '/content/thumbnail/{id}':
    get:
      tags:
        - v1
      operationId: thumbnail
      description: get thumbnail image by given content id
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
      responses:
        '200':
          description: binary as response

  '/file/upload':
    post:
      tags:
        - v1
      operationId: upload
      description: file upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                tags:
                  type: array
                  format: string
      responses:
        '202':
          description: upload a new content in file format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MediaFile'
  '/file/multipleUpload':
    post:
      tags:
        - v1
      operationId: multipleUpload
      description: multiple files upload
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                files:
                  type: array
                  format: binary
                tags:
                  type: array
                  format: string
      responses:
        '202':
          description: upload multiple content in file format
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaFile'
  '/file/download/{id}':
    get:
      tags:
        - v1
      operationId: download
      description: download file with the identifier
      parameters:
        - name: id
          in: path
          required: true
          description: mediafile identifier
          schema:
            type: string
      responses:
        '200':
          description: binary file as response
  /ingest/webpage:
    post:
      tags:
        - v1
      operationId: convertUrlToMediafile
      description: capture a screenshort from the given url
      parameters:
        - name: url
          in: query
          required: true
          description: target url
          schema:
            type: string
        - name: title
          in: query
          required: true
          description: target title
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaFile'
  /trash:
    get:
      tags:
        - v1
      operationId: getAllTrash
      description: fetch all deleted files in the trash
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MediaFile'
    delete:
      tags:
      - v1
      operationId: emptyTrash
      description: delete all files in the trash
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: number

components:
  schemas:
    MediaFile:
      description: Model of media file
      properties:
        id:
          type: string
          example: 1mWG-nQBWmmN0po1BUoG
        filename:
          type: string
          example: foo.txt
        mimeType:
          type: string
          example: text/plain
        size:
          type: integer
          description: file size in byte
        title:
          type: string
        content:
          type: string
        activated:
          type: boolean
        createdBy:
          type: string
        creationDate:
          $ref: ./share.yaml#/components/schemas/LocalDateTime
        modifiedBy:
          type: string
        modificationDate:
          $ref: ./share.yaml#/components/schemas/LocalDateTime
        props:
          type: array
          items:
            description: list of additional properties
            properties:
              name:
                type: string
              value:
                type: string
              dataType:
                $ref: '#/components/schemas/MediaFilePropType'
        tags:
          type: array
          items:
            description: list of tags
            type: string
        children:
          type: array
          items:
            $ref: '#/components/schemas/MediaFile'
    MediaFilePropType:
      type: string
      enum:
        - integer
        - string
        - boolean
        - float
        - datetime
    ThumbnailSize:
      type: string
      enum:
        - small
        - large
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
